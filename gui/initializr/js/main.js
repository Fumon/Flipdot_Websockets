// Generated by CoffeeScript 1.6.3
var cell, conn, flipws, offcolor, oncolor, sendWS,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

sendWS = function(x, y, s, over) {
  var buff, ss;
  buff = new Uint8Array(3);
  buff[0] = x;
  buff[1] = y;
  ss = 0;
  if (s === true) {
    ss = 1;
  }
  if (over != null) {
    buff[2] = over;
  } else {
    buff[2] = ss;
  }
  return conn.send(buff);
};

oncolor = '#FFFF00';

offcolor = '#EEEEEE';

cell = (function() {
  cell.mousedown = false;

  cell.draw = false;

  cell.list = [];

  function cell(draw, x, y, width, border) {
    this.draw = draw;
    this.x = x;
    this.y = y;
    this.menter = __bind(this.menter, this);
    this.mup = __bind(this.mup, this);
    this.mdown = __bind(this.mdown, this);
    this.click = __bind(this.click, this);
    this.flipstate = __bind(this.flipstate, this);
    this.flipoff = __bind(this.flipoff, this);
    this.flipon = __bind(this.flipon, this);
    this.on = __bind(this.on, this);
    this.off = __bind(this.off, this);
    this.update = __bind(this.update, this);
    this.r = draw.rect(width, width).move(this.x * (width + border), this.y * (width + border));
    this.off();
    this.r.on('click', this.click);
    this.r.on('mouseenter', this.menter);
    cell.list.push(this);
  }

  cell.prototype.update = function() {
    var col;
    if (this.state === false) {
      col = offcolor;
    } else {
      col = oncolor;
    }
    return this.r.attr({
      fill: col
    });
  };

  cell.prototype.off = function() {
    this.state = false;
    return this.update();
  };

  cell.prototype.on = function() {
    this.state = true;
    return this.update();
  };

  cell.prototype.flipon = function() {
    if (!this.state) {
      this.on();
      return sendWS(this.x, this.y, this.state, null);
    }
  };

  cell.prototype.flipoff = function() {
    if (this.state) {
      this.off();
      return sendWS(this.x, this.y, this.state, null);
    }
  };

  cell.prototype.flipstate = function() {
    if (this.state === true) {
      this.off();
    } else {
      this.on();
    }
    return sendWS(this.x, this.y, this.state, null);
  };

  cell.prototype.click = function() {
    cell.mousedown = !cell.mousedown;
    if (cell.mousedown) {
      this.flipstate();
      return cell.draw = this.state;
    }
  };

  cell.prototype.mdown = function() {
    cell.mousedown = true;
    return this.flipstate();
  };

  cell.prototype.mup = function() {
    return cell.mousedown = false;
  };

  cell.prototype.menter = function() {
    if (cell.mousedown === true) {
      if (cell.draw && (!this.state)) {
        return this.flipon();
      } else if (!cell.draw && this.state) {
        return this.flipoff();
      }
    }
  };

  cell.clear = function(y) {
    var c, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
    if (y) {
      _ref = cell.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        _results.push(c.on());
      }
      return _results;
    } else {
      _ref1 = cell.list;
      _results1 = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        c = _ref1[_j];
        _results1.push(c.off());
      }
      return _results1;
    }
  };

  return cell;

}).call(this);

flipws = (function() {
  function flipws() {
    this.send = __bind(this.send, this);
    this.onmessage = __bind(this.onmessage, this);
    this.close = __bind(this.close, this);
    this.error = __bind(this.error, this);
    this.open = __bind(this.open, this);
    var url;
    url = "ws://" + location.host + "/flipdot";
    console.log("Connecting to " + url);
    this.c = new WebSocket(url);
    this.c.onopen = this.open;
  }

  flipws.prototype.open = function() {
    this.status = "open";
    return console.log("opened connection to server");
  };

  flipws.prototype.error = function(err) {
    return console.log("error occured " + err);
  };

  flipws.prototype.close = function() {
    this.status = "closed";
    return console.log("connection closed");
  };

  flipws.prototype.onmessage = function(e) {
    return cosole.log("got a message " + e.data);
  };

  flipws.prototype.send = function(bf) {
    if (this.status === "open") {
      return this.c.send(bf.buffer);
    }
  };

  return flipws;

})();

conn = new flipws();

$(function() {
  var b, draw, t, w, _i, _ref, _results;
  w = 10;
  b = 2;
  draw = SVG('mainthing').size((w + b) * 28, (w + b) * 24);
  $('#blackbtn').click(function(e) {
    cell.clear(false);
    return sendWS(0, 0, 0, 14);
  });
  $('#yellowbtn').click(function(e) {
    cell.clear(true);
    return sendWS(0, 0, 0, 15);
  });
  _results = [];
  for (t = _i = 0, _ref = (28 * 24) - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; t = 0 <= _ref ? ++_i : --_i) {
    _results.push(new cell(draw, Math.floor(t / 24), t % 24, w, b));
  }
  return _results;
});
